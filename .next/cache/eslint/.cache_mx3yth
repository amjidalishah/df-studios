[{"/Users/lucasraza/Desktop/df-studios/src/pages/_app.tsx":"1","/Users/lucasraza/Desktop/df-studios/src/pages/_document.tsx":"2","/Users/lucasraza/Desktop/df-studios/src/pages/api/hello.ts":"3","/Users/lucasraza/Desktop/df-studios/src/pages/index.tsx":"4"},{"size":178,"mtime":1675133820233,"results":"5","hashOfConfig":"6"},{"size":327,"mtime":1675147521581,"results":"7","hashOfConfig":"6"},{"size":307,"mtime":1675133820232,"results":"8","hashOfConfig":"6"},{"size":3186,"mtime":1675157140676,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b9gckz",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/lucasraza/Desktop/df-studios/src/pages/_app.tsx",[],[],"/Users/lucasraza/Desktop/df-studios/src/pages/_document.tsx",[],[],"/Users/lucasraza/Desktop/df-studios/src/pages/api/hello.ts",[],[],"/Users/lucasraza/Desktop/df-studios/src/pages/index.tsx",["23"],[],"import * as React from 'react'\nimport { useScroll, animated, useSpring, SpringValue } from '@react-spring/web'\n\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport styles from '@/styles/Home.module.scss'\n\nconst X_LINES = 40\n\nconst PAGE_COUNT = 5\n\nconst INITIAL_WIDTH = 20\n\n\nexport default function Home() {\n\n  const containerRef = React.useRef<HTMLDivElement>(null!)\n  const barContainerRef = React.useRef<HTMLDivElement>(null!)\n\n  const duration = 5\n  const [time, setTime] = React.useState(0);\n\n  React.useEffect(() => {\n    let int = .05\n\n    const intervalId = setInterval(() => {\n      setTime((prevTime) => prevTime + int);\n      if (time/duration > 0.7) {\n        textApi.start({ y: '0' })\n      } else {\n        textApi.start({ y: '100%' })\n      }\n      if (time >= duration) {\n        int = 0.02\n      }\n    }, int);\n  }, []);\n  console.log(time)\n\n\n\n\n  const [textStyles, textApi] = useSpring(() => ({\n    y: '100%',\n  }))\n\n  // const { scrollYProgress } = useScroll({\n  //   onChange: ({ value: { scrollYProgress } }) => {\n  //     console.log(scrollYProgress)\n      \n  //   },\n  //   default: {\n  //     immediate: false,\n  //   },\n  // })\n\n\n  return (\n      <div ref={containerRef} className={styles.body}>\n      \n      <div className={styles.animated__layers}>\n        <animated.div ref={barContainerRef} className={styles.bar__container}>\n          {Array.from({ length: X_LINES }).map((_, i) => (\n            \n            <animated.div\n              key={i}\n              className={styles.bar}\n              style={{\n                width: new SpringValue(time/duration).to(scrollP => {\n                  const percentilePosition = (i + 1) / X_LINES\n\n                  return INITIAL_WIDTH / 4 + 40 * Math.cos(((percentilePosition - scrollP) * Math.PI) / 1.5) ** 32\n                }),\n              }}\n            />\n          ))}\n        </animated.div>\n        <animated.div className={styles.bar__container__inverted}>\n          {Array.from({ length: X_LINES }).map((_, i) => (\n            <animated.div\n              key={i}\n              className={styles.bar}\n              style={{\n                width: new SpringValue(time/duration).to(scrollP => {\n                  const percentilePosition = 1 - (i + 1) / X_LINES\n\n                  return INITIAL_WIDTH / 4 + 40 * Math.cos(((percentilePosition - scrollP) * Math.PI) / 1.5) ** 32\n                }),\n              }}\n            />\n          ))}\n        </animated.div>\n        <animated.div\n          className={styles.dot}\n          style={{\n            clipPath: new SpringValue(time/duration).to(val => `circle(${val * 100}%)`),\n          }}>\n          \n            <animated.span className={styles.logo}>\n              <h2 className={styles.name}>\n                <span style={{padding: '10px'}}>DakotahFerrari Studios</span>\n              </h2>\n              <br/>\n              <span className={styles.coming_soon}>Coming Soon</span>\n              \n            </animated.span>\n            \n          \n        </animated.div>\n      </div>\n      {new Array(PAGE_COUNT).fill(null).map((_, index) => (\n        <div className={styles.full__page} key={index} />\n      ))}\n    </div>\n  )\n}\n",{"ruleId":"24","severity":1,"message":"25","line":37,"column":6,"nodeType":"26","endLine":37,"endColumn":8,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'textApi' and 'time'. Either include them or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [textApi, time]",{"range":"31","text":"32"},[847,849],"[textApi, time]"]